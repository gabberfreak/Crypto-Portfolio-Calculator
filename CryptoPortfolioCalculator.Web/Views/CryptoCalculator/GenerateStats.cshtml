@model CalculatorViewModel

<div class="form-horizontal" id="form">
    <hr />
    <div class="form-group">
        <table class="table table-responsive">
            <tbody>
                <tr>
                    <th>
                        @Html.DisplayNameFor(m => m.InitialValue)
                    </th>
                    <th>
                        @Html.DisplayNameFor(m => m.Overall)
                    </th>
                </tr>
                <tr>
                    <td id="initial">
                        @Html.DisplayFor(m => m.InitialValue)
                    </td>
                    <td>
                        @Html.DisplayFor(m => m.Overall)
                    </td>
                </tr>
            </tbody>
        </table>

    </div>
    <div class="form-group">
        <table class="table table-responsive">
            <tbody>
                <tr>
                    <th>
                        @Html.DisplayNameFor(m => m.CoinChange.First().CoinName)
                    </th>

                    <th>
                        @Html.DisplayNameFor(m => m.CoinChange.First().PercentageChange)
                    </th>
                </tr>
                @foreach (var item in Model.CoinChange)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.CoinName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.PercentageChange)
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<script src="~/lib/jquery/dist/jquery.min.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0-rc.2.23480.2/signalr.min.js" type="text/javascript"></script>

<script>

    $(function () {
        var connection = new signalR.HubConnectionBuilder().withUrl("/calculatePortfolioPercentChangeHub").build();

        connection.start();

        connection.on("AppendValues", function (model) {

            $("#initial").text(model.InitialValue);
        });

        
        setInterval(function () {
            var initialText = $('#initial').text().replace(/(\r\n|\n|\r)/gm, "");

            $.post("/CryptoCalculator/GetInitialPortfolioValue", { initialPortfolioValue: initialText }, function (data) {
                connection.invoke("UpdatePortfolioValues", data);
            });
        }, 1000 * 60 * 5);
    });
</script>

